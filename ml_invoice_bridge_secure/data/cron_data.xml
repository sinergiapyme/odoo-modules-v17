<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1">
        
        <!-- CRON PRINCIPAL: Auto Upload ML Invoices - VERSIÓN SIN WARNINGS -->
        <record id="cron_auto_upload_ml_invoices" model="ir.cron">
            <field name="name">Auto Upload ML Invoices</field>
            <field name="model_id" ref="account.model_account_move"/>
            <field name="state">code</field>
            <field name="code">
# =============================================================================
# CRON AUTO-UPLOAD ML INVOICES - VERSIÓN SIN WARNINGS
# =============================================================================

import time
import gc
from datetime import datetime

try:
    start_time = datetime.now()
    current_db = env.cr.dbname
    
    # 1. VERIFICAR CONFIGURACIÓN
    config = env['mercadolibre.config'].get_active_config()

    if not config:
        env['mercadolibre.log'].create({
            'invoice_id': False,
            'status': 'error', 
            'message': 'Cron stopped: No active MercadoLibre configuration found',
            'ml_pack_id': False
        })
        return  # Sin raise para evitar marcar cron como fallado

    if not config.auto_upload:
        env['mercadolibre.log'].create({
            'invoice_id': False,
            'status': 'error',
            'message': 'Cron stopped: Auto upload disabled in MercadoLibre config',
            'ml_pack_id': False
        })
        return  # Sin raise para evitar marcar cron como fallado

    # 2. BUSCAR FACTURAS PENDIENTES
    pending_invoices = env['account.move'].search([
        ('is_ml_sale', '=', True),
        ('ml_uploaded', '=', False),
        ('state', '=', 'posted'),
        ('ml_pack_id', '!=', False),
        ('ml_pack_id', '!=', ''),
    ], limit=20, order='create_date asc')

    # 3. LOG INICIO DE EJECUCIÓN
    env['mercadolibre.log'].create({
        'invoice_id': False,
        'status': 'success',
        'message': 'Cron started on %s - Found %d pending invoices' % (current_db, len(pending_invoices)),
        'ml_pack_id': False
    })

    # 4. PROCESAR FACTURAS
    success_count = 0
    error_count = 0
    consecutive_errors = 0

    for idx, invoice in enumerate(pending_invoices):
        try:
            # Validación de integridad
            if not invoice.ml_pack_id or not invoice.is_ml_sale or invoice.state != 'posted':
                env['mercadolibre.log'].create({
                    'invoice_id': invoice.id,
                    'status': 'error',
                    'message': 'Cron skipped: Invoice failed integrity check',
                    'ml_pack_id': invoice.ml_pack_id or 'N/A'
                })
                error_count += 1
                continue
            
            # COMMIT INDIVIDUAL
            with env.cr.savepoint():
                result = invoice.action_upload_to_ml()
                success_count += 1
                consecutive_errors = 0
                
                env['mercadolibre.log'].create({
                    'invoice_id': invoice.id,
                    'status': 'success',
                    'message': 'Cron auto upload successful (#%d/%d) on %s' % (idx + 1, len(pending_invoices), current_db),
                    'ml_pack_id': invoice.ml_pack_id
                })
            
            # RATE LIMITING
            if success_count % 5 == 0:
                time.sleep(3)
                gc.collect()
            else:
                time.sleep(1)
            
            # COMMIT PERIÓDICO
            if (idx + 1) % 10 == 0:
                env.cr.commit()
                time.sleep(2)
                gc.collect()
                
        except Exception as e:
            error_count += 1
            consecutive_errors += 1
            
            try:
                env['mercadolibre.log'].create({
                    'invoice_id': invoice.id,
                    'status': 'error',
                    'message': 'Cron auto upload failed (#%d/%d) on %s: %s' % (idx + 1, len(pending_invoices), current_db, str(e)[:250]),
                    'ml_pack_id': invoice.ml_pack_id or 'N/A'
                })
            except:
                pass
            
            # CIRCUIT BREAKER
            if consecutive_errors >= 3:
                env['mercadolibre.log'].create({
                    'invoice_id': False,
                    'status': 'error',
                    'message': 'Cron stopped after %d consecutive errors on %s' % (consecutive_errors, current_db),
                    'ml_pack_id': False
                })
                break
            
            time.sleep(3)
            gc.collect()

    # 5. LOG RESUMEN FINAL
    execution_time = (datetime.now() - start_time).total_seconds()
    
    remaining_invoices = env['account.move'].search_count([
        ('is_ml_sale', '=', True),
        ('ml_uploaded', '=', False),
        ('state', '=', 'posted'),
        ('ml_pack_id', '!=', False),
        ('ml_pack_id', '!=', ''),
    ])
    
    env['mercadolibre.log'].create({
        'invoice_id': False,
        'status': 'success' if error_count == 0 else 'error',
        'message': 'Cron execution on %s completed in %.1fs - Success: %d, Errors: %d, Remaining: %d' % (current_db, execution_time, success_count, error_count, remaining_invoices),
        'ml_pack_id': False
    })

except Exception as e:
    # LOG ERROR CRÍTICO SIN FALLAR
    try:
        current_db = env.cr.dbname if hasattr(env, 'cr') else 'unknown'
        execution_time = (datetime.now() - start_time).total_seconds()
        env['mercadolibre.log'].create({
            'invoice_id': False,
            'status': 'error',
            'message': 'Critical cron error on %s after %.1fs: %s' % (current_db, execution_time, str(e)[:400]),
            'ml_pack_id': False
        })
    except:
        pass

finally:
    # LIMPIEZA FINAL
    try:
        env.cr.commit()
    except:
        pass
    gc.collect()
            </field>
            <field name="interval_number">15</field>
            <field name="interval_type">minutes</field>
            <field name="numbercall">-1</field>
            <field name="active">False</field>
            <field name="user_id" ref="base.user_root"/>
            <field name="priority">10</field>
        </record>

        <!-- CRON SECUNDARIO: DESACTIVADO -->
        <record id="cron_fix_ml_data_invoices" model="ir.cron">
            <field name="name">Fix Missing ML Data - DISABLED</field>
            <field name="model_id" ref="account.model_account_move"/>
            <field name="state">code</field>
            <field name="code">
# CRON SECUNDARIO DESACTIVADO DURANTE PROCESAMIENTO MASIVO
env['mercadolibre.log'].create({
    'invoice_id': False,
    'status': 'success',
    'message': 'Secondary cron disabled during bulk processing',
    'ml_pack_id': False
})
            </field>
            <field name="interval_number">6</field>
            <field name="interval_type">hours</field>
            <field name="numbercall">-1</field>
            <field name="active">False</field>
            <field name="user_id" ref="base.user_root"/>
            <field name="priority">20</field>
        </record>

    </data>
</odoo>
